   Input     Has      Initial    Number	      AvgTime	        AvgTime
   Size	     Dups      Order     of runs     foruseInt          forsort
-----------------------------------------------------------------------------
|   100   |   no   |  random    |   5   |      0.00       |      0.00       |
|   100   |   no   |  sorted    |   5   |      0.00       |      0.00       |
|   100   |   no   |  reverse   |   5   |      0.00       |      0.00       |
-----------------------------------------------------------------------------
|   100   |   yes  |  random    |   5   |      0.00       |      0.00       |
|   100   |   yes  |  sorted    |   5   |      0.00       |      0.00       |
|   100   |   yes  |  reverse   |   5   |      0.00       |      0.00       |
-----------------------------------------------------------------------------
|  1000   |   no   |  random    |   5   |      0.00       |      0.00       |
|  1000   |   no   |  sorted    |   5   |      0.00       |      0.00       |
|  1000   |   no   |  reverse   |   5   |      0.00       |      0.00       |
-----------------------------------------------------------------------------
|  1000   |   yes  |  random    |   5   |      0.00       |      0.00       |
|  1000   |   yes  |  sorted    |   5   |      0.00       |      0.00       |
|  1000   |   yes  |  reverse   |   5   |      0.00       |      0.00       |
-----------------------------------------------------------------------------
|  10000  |   no   |  random    |   5   |      0.18 	  |      0.02       |
|  10000  |   no   |  sorted    |   5   |      0.01* 	  |      0.01       |
|  10000  |   no   |  reverse   |   5   |      0.01* 	  |      0.01       |
-----------------------------------------------------------------------------
|  10000  |   yes  |  random    |   5   |      0.17 	  |      0.01       |
|  10000  |   yes  |  sorted	|   5   |      0.01* 	  |      0.02       |
|  10000  |   yes  |  reverse	|   5   |      0.01* 	  |      0.01       |
-----------------------------------------------------------------------------
|  20000  |   no   |  random	|   5   |      1.04 	  |      0.03       |
|  20000  |   no   |  sorted	|   5   |      0.01* 	  |      0.02       |
|  20000  |   no   |  reverse	|   5   |      0.01* 	  |      0.02       |
-----------------------------------------------------------------------------
|  20000  |   yes  |  random	|   5   |      0.83 	  |      0.03       |
|  20000  |   yes  |  sorted	|   5   |      0.01* 	  |      0.02       |
|  20000  |   yes  |  reverse	|   5   |      0.02* 	  |      0.02       |
-----------------------------------------------------------------------------
|  40000  |   no   |  random    |   5   |      4.94       |      0.07       |
|  40000  |   no   |  sorted	|   5   |      0.03* 	  |      0.04       |
|  40000  |   no   |  reverse	|   5   |      0.03* 	  |      0.03       |
-----------------------------------------------------------------------------
|  40000  |   yes  |  random	|   5   |      4.84 	  |      0.08       |
|  40000  |   yes  |  sorted	|   5   |      0.04* 	  |      0.04       |
|  40000  |   yes  |  reverse	|   5   |      0.03* 	  |      0.04       |
-----------------------------------------------------------------------------
|  80000  |   no   |  random    |   5   |      30.3       |      0.18       |
|  80000  |   no   |  sorted    |   5   |      0.06*      |      0.08       |
|  80000  |   no   |  reverse   |   5   |      0.08*      |      0.10       |
-----------------------------------------------------------------------------
|  80000  |   yes  |  random    |   5   |      30.7       |      0.20       |
|  80000  |   yes  |  sorted    |   5   |      0.07*      |      0.10       |
|  80000  |   yes  |  reverse   |   5   |      0.06*      |      0.13       |
-----------------------------------------------------------------------------


---------------
|Observations |
---------------

== Input Size ==
As the input size grew, it's clear that useIntList.c is much slower in terms of user time in
comparison whenever the input was a random list. It also seems that the user time doesn't increase
in proportion to the input size, e.g. 20000->40000 shows a ~500% increase while 40000->80000 shows a
~600% increase. Although these increases are pretty close, I'd say that data I've collected isn't
enough to say that the user time is directly proportional to input size, and I'm sure that there are 
also interferences by software/hardware that change how the program is actually run (for the better
or worse).

So, for what I have tested I can only say that as input size grows, the user time increases with
some level of proportionality. 

== Dupes ==
I couldn't see much of a trend when it came to dupes both for my program and sort. 
There didn't seem to be much of a difference between the user times of lists that had dupes and lists 
that didn't. It's also hard to say because I've written my code so that sorted and reverse orders
would be optimised to finish extremely fast, leaving only random orders left to be analysed. Random
orders aren't very reliable but based off the averages it still seems to show that there is no
difference in user time when running into a list with duplicates or none at all.

== Initial Order ==
From the way I wrote my code, the user times were as expected since I have taken in the case of
being the largest and smallest values first before having to traverse through the list of numbers.
Sorted and reversed order align with my expectations with basically the same user time while random
is the longest since it will actually have to traverse over the list of numbers frequently. This
observation applies both to the program I used and the built-in sort command. 

== Conclusion ==
From what I've tested, I can confidently say that it would be ideal to use useIntList.c whenever it
is given that the list of numbers is in a sorted fashion (i.e. sorted ascending or descending). It
matches the speed of sort but also can beat it when the input size is very large (take a look at
80000 input size).

Otherwise, it's clear that the program lacks speed and efficiency when it comes to working with
random order lists, so it'd be a good idea to use the sort command to save time
(especially when the input size gets very large). 
